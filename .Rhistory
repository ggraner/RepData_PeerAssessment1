cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
5:20
-(5:20)
select(-(X:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_gb=size_mb/2^10)
mutate(cran3, size_gb=size_mb/2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
crany<-tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
summarize(tbl, pack_sum)
summarize(tbl, pack_sum)
tbl
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
reset()
submit()
submit()
?select
?%>%
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl
)
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind, data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R", local="TRUE")
pathtofile()
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R", local=TRUE)
source(pathtofile("myLabels.R", local=TRUE))
source(pathtofile("myLabels.R"),local=TRUE)
xyplot( price~carat | color*cut, diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot( price~carat | color*cut, diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
colors()
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPallette(c("red","blue"))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue", "green"), alpha=.5)
p3
p3(5)
rgb(0,.5,.5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5), alpha=.3)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3, "BuGn")
cols
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(vulcano, col=pal(20))
image("vulcano", col=pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(x,y, mpg)
qplot(displ,hwy, mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy, data=mpg, color=drv)
qplot(displ,hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", col=manufacturer)
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, factes=. ~ drv)
qplot(displ, hwy, data=mpg, facets=. ~ drv)
qplot(hwy, data=mpg, facets=drv ~ ., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets=.~drv)
g<-ggplot(mpg, displ, hwy)
g<-ggplot(mpg, displ ~ hwy)
g<-qplot(mpg, displ ~ hwy)
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=.5)
g+geom_point(size=4, alpha=.5, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv)+theme_bw(base_family = "Times")
)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3)
)
g<-ggplot(testdat, aes(x=myx, y=myy))
g<-ggplot(testdat, aes(x=myx, y=myy))+geom_line()
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut())
qplot(price, data=diamonds, geom="density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, colors=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm"))
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm"))
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, geom =c("point","smooth"),method="lm")+facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+geom_facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+facet(.~cut)
qplot(carat,price,data=diamonds, color=cut) + +facet(.~cut)
qplot(carat,price,data=diamonds, color=cut) + facet(.~cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=.3)
g+geom_point(alpha=1/3)
cutpoint<-quantile(diamonds$cara, seq(0,1,length=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-
g
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid( cut ~ car2 )
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid( cut ~ car2 )+geom_smooth(method="lm", size=3, color="pink")
ggplot(aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(deit)
summary(Deit)
summary(Diet)
str(Diet)
str(BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages(ggplot2movies)
install.packages(ggplot2movies)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
str(movies)
qplot(votes, rating, data = movies)
library(ggplot2)
movies
panel.abline()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
plot(as.dendrogram(hc), h=1.5, col="blue")
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4, col="red")
5
abline(h=.05, col="red")
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(as.dendrogram(denmt))
plot(denmt)
plot(denmt)
distmt
cmat
point(cx,cy,col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
points(cx,cy,col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, mean(distTmp), which.min)
apply(distTmp,2,which.min)
point(x,y,pch=19, cex=2, col=cols1[newClust])
points(x,y,pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply()
apply(distTmp2,2,which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy,col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluser, pch=19, cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points()
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
heat(constantMatrix)
head(constantMatrix)
svd2$d
svd2[2,]
svd2$v[2,]
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
a1<-(svd1$u[,1] * svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2<-(svd1$u[,1:2]*svd1$d[,1:2]) %*% t(svd1$v[,1:2])
a2<-(svd1$u[,1:2]*svd1$d[2,]) %*% t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% svd1$d[2,]  %*% t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% svd1$d[,1:2]  %*% t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myimage(a2)
myImage(a2)
a2<-svd1$u[,2:5] %*% diag(svd1$d[2:5])  %*% t(svd1$v[,2:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
ssd[562:563]
names(ssd[562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd, subject=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
name(sub1[1:12])
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist<-dist(sub1[,10:12] )
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,10:12], maxCon)
mdist<-dist(c(sub1[,10:12], maxCon))
mdist<-dist(c(sub1[10:12], maxCon))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,], centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<-dim(kClust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
install.packages(kernlab)
setwd("data_science")
list.files()
setwd("RepData_PeerAssissment1")
setwd("RepData_PeerAssessment1")
list.files
list.files()
if(!file.exists("./activity.csv")) {
cat("extract dataset from activity.zip\n")
unzip("./activity.zip", exdir="./")
}
### 2 - READ DATA ###
# if files in listing, read them...
if("activity.csv" %in% dir()){
raw_data<-read.csv("activity.csv")
cat("file activity.csv was sucessfully read...\n")
}else return("activity.csv is missing, please check")
### 3 - CREATE & SAVE PLOT ###
steps_per_day <- aggregate(steps ~ date,raw_data, sum, na.rm=TRUE)
#  png(filename = "plot1.png", width = 480, height = 480, units = "px")
par(mar=c(5,5,5,5))
barplot(
steps_per_day$steps,
names.arg=steps_per_day$date,
xlab="Day",
ylab="Steps",
main="total number of steps taken each day",
col="lightblue"
)
hist(steps_per_day$steps, xlab="steps per day", main="total number of steps taken each day")
mean(steps_per_day$steps)
median(steps_per_day$steps)
#What is the average daily activity pattern?
avg_daily_pattern<-aggregate(steps ~ interval, raw_data, mean, na.rm=TRUE)
plot(avg_daily_pattern, type="l")
hist(steps_per_day$steps, xlab="steps per day", main="total number of steps taken each day")
hist(steps_per_day$steps, xlab="steps per day", main="total number of steps taken each day", ylim=c(0,40))
hist(steps_per_day$steps, xlab="steps per day", main="total number of steps taken each day", ylim=c(0,30))
?abline
str(steps_per_day)
str(raw_dataq)
str(raw_data)
head(raw_data, 15)
?mean
raw_data_na <- raw_data
mean_interval <- mean(raw_data_na$interval)
mean_interval
mean(raw_data_na$interval)
str(raw_data)
mean(raw_data_na$steps)
mean(raw_data$steps)
mean(steps_per_day$interval)
mean(steps_per_day$steps)
mean(steps_per_day$steps, na.rm=TRUE)
mean(avg_daily_pattern$steps, na.rm=TRUE)
mean(avg_daily_pattern$interval, na.rm=TRUE)
?replace
replace(raw_data_na, which(is.na(raw_data_na)), 37)
na.omit(raw_data_na)
which(is.na(raw_data$steps))
which(is.na(raw_data$date))
which(is.na(raw_data$interval))
raw_data_na$steps <-  raw_data_na$steps[which(is.na(raw_data_na$steps))] <- mean(avg_daily_pattern$steps, na.rm=TRUE)
sum(!complete.cases(raw_data_na))
sum(complete.cases(raw_data_na))
head(raw_data_na)
raw_data_na$steps>38
which(raw_data_na$steps>38)
raw_data_na <- raw_data
which(raw_data_na$steps>38)
head(raw_data_na)
raw_data_na$steps[which(is.na(raw_data_na$steps)),] <- mean(avg_daily_pattern$steps, na.rm=TRUE)
raw_data_na$steps[which(is.na(raw_data_na$steps))] <- mean(avg_daily_pattern$steps, na.rm=TRUE)
head(raw_data_na)
which(raw_data_na$steps>38)
head(raw_data_na)
raw_data_na
?apply
weekdays(raw_data_na$date)
?weekdays
str(raw_data_na)
weekdays(as.POSIXlt(raw_data_na$date, format="%Y-%m-%d")
)
raw_data_na$week_status
raw_data_na$week_status <- weekdays(as.POSIXlt(raw_data_na$date, format="%Y-%m-%d"))
raw_data_na$week_status
raw_data_na
